/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mouseentrenador;

import java.awt.Dimension;
import java.awt.Toolkit;
import static java.lang.Integer.parseInt;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Date;

/**
 *
 * @author gus
 */
public class AreaEntrenamiento extends javax.swing.JFrame {

    /**
     * Creates new form AreaEntrenamiento
     */
    Toolkit t = Toolkit.getDefaultToolkit();
    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

    int n_ensayos = 10;

    String nombre;

    Boolean iniciar_prueba = false;

    Boolean pantalla_completa = true;                                         //<---- cambiar según se desee!

    int x, y;

    int click_buenos = 0;

    int umbral = 5;

    int lim_tiempo = 3;

    int lim_x = 80;

    int lim_y = 80;

    int hora, minutos, segundos, milisegundos, hora_a, minutos_a, segundos_a, milisegundos_a;

    BufferedWriter output;

    Date date_a, date_b;

    public AreaEntrenamiento() throws IOException {

        initComponents();
        //setExtendedState(java.awt.Frame.MAXIMIZED_BOTH); //maximizar la pantalla

        System.out.println("Tu resolución es de " + screenSize.width + "x" + screenSize.height);

        if (pantalla_completa) {
            setBounds(50, 50, screenSize.width, screenSize.height);
        } else {
            setBounds(50, 50, 700, 700);
        }

        lblEstimulo.setToolTipText(null);

        //Momento de inicio de la prueba
        Calendar calendario = new GregorianCalendar();
        hora_a = calendario.get(Calendar.HOUR_OF_DAY);
        minutos_a = calendario.get(Calendar.MINUTE);
        segundos_a = calendario.get(Calendar.SECOND);
        milisegundos_a = calendario.get(Calendar.MILLISECOND);

        System.out.println("Ini'cio prueba: " + hora_a + ":" + minutos_a + ":" + segundos_a + ":" + milisegundos_a);

        iniciar_prueba = true;

        System.out.println("Hola " + nombre);

        date_a = new java.util.Date();  //<-----

        output = new BufferedWriter(new FileWriter(nombre + ".csv", true));

        output.write("X_target,Y_target,Hora_target,X_click_sujeto,Y_click_sujeto,Hora_click_sujeto,Diferencia_X,Diferencia_Y, Dif_Tiempo, N_correctos,Posición Target, Fecha_prueba: " + date_a
                + ",Sujeto: " + nombre + ",N_ensayos: " + n_ensayos + ",Umbral Clicks correctos: " + umbral + ",Lim. Tiempo (seg): " + lim_tiempo + ",Distancia Limite_X: " + lim_x + ",Distancia Limite_Y: " + lim_y);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        lblEstimulo = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_num_ensayos = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        menu_iniciar_entrenamiento = new javax.swing.JMenuItem();
        menu_cerrar = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        lblEstimulo.setFont(new java.awt.Font("Menlo", 0, 100)); // NOI18N
        lblEstimulo.setForeground(new java.awt.Color(0, 51, 255));
        lblEstimulo.setText("*");
        lblEstimulo.setToolTipText(""); // NOI18N
        lblEstimulo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lblEstimuloMousePressed(evt);
            }
        });

        menu_num_ensayos.setText("[Menú]                                             «Entrenamiento para usar Mouse»            Lab. Neurociencias Cognitivas, UNAM.");

        jMenuItem5.setText("Cambiar número de ensayos");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        menu_num_ensayos.add(jMenuItem5);

        jMenuItem2.setText("Cambiar Umbral de Clicks correctos");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        menu_num_ensayos.add(jMenuItem2);

        jMenuItem3.setText("Cambiar límite de tiempo");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        menu_num_ensayos.add(jMenuItem3);

        menu_iniciar_entrenamiento.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_iniciar_entrenamiento.setText("Iniciar");
        menu_iniciar_entrenamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_iniciar_entrenamientoActionPerformed(evt);
            }
        });
        menu_num_ensayos.add(menu_iniciar_entrenamiento);

        menu_cerrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        menu_cerrar.setText("Cerrar");
        menu_cerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_cerrarActionPerformed(evt);
            }
        });
        menu_num_ensayos.add(menu_cerrar);

        jMenuBar1.add(menu_num_ensayos);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(306, 306, 306)
                .addComponent(lblEstimulo)
                .addContainerGap(419, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(202, 202, 202)
                .addComponent(lblEstimulo)
                .addContainerGap(212, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menu_iniciar_entrenamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_iniciar_entrenamientoActionPerformed
        try {
            // TODO add your handling code here:

            nombre = JOptionPane.showInputDialog(null, "¿Cuál es tu nombre?", JOptionPane.QUESTION_MESSAGE);

            if (nombre != null) {

                JOptionPane.showMessageDialog(null, "Iniciar prueba");

                //iniciando el estímulo al centro
                if (this.pantalla_completa) {

                    x = (screenSize.width / 2);
                    y = (screenSize.height / 2);

                } else {

                    x = 300;
                    y = 250;
                }
                this.lblEstimulo.setLocation(x, y);

                //Momento de inicio de la prueba
                Calendar calendario = new GregorianCalendar();
                hora_a = calendario.get(Calendar.HOUR_OF_DAY);
                minutos_a = calendario.get(Calendar.MINUTE);
                segundos_a = calendario.get(Calendar.SECOND);
                milisegundos_a = calendario.get(Calendar.MILLISECOND);

                System.out.println("Inicio prueba: " + hora_a + ":" + minutos_a + ":" + segundos_a + ":" + milisegundos_a);

                iniciar_prueba = true;

                System.out.println("Hola " + nombre);

                date_a = new java.util.Date();  //<-----

                output = new BufferedWriter(new FileWriter(nombre + ".csv", true));

                output.write("X_target,Y_target,Hora_target,X_click_sujeto,Y_click_sujeto,Hora_click_sujeto,Diferencia_X,Diferencia_Y, Dif_Tiempo, N_correctos,Posición Target, Fecha_prueba: " + date_a
                        + ",Sujeto: " + nombre + ",N_ensayos: " + n_ensayos + ",Umbral Clicks correctos: " + umbral + ",Lim. Tiempo (seg): " + lim_tiempo + ",Distancia Limite_X: " + lim_x + ",Distancia Limite_Y: " + lim_y);

            } else {

                JOptionPane.showMessageDialog(null, "No introdujo el nombre del usuario, verifique.", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (IOException ex) {

            Logger.getLogger(AreaEntrenamiento.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_menu_iniciar_entrenamientoActionPerformed

    private void menu_cerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_cerrarActionPerformed
        // TODO add your handling code here:
        if (JOptionPane.showConfirmDialog(rootPane, "¿Confirma que desea terminar el programa?", "Terminar Programa", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)

            System.exit(0);
    }//GEN-LAST:event_menu_cerrarActionPerformed

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        try {
            // TODO add your handling code here:

            if (iniciar_prueba) {

                //Coordenadas en donde dio clic el sujeto
                //Coordenadas en donde dio clic el sujeto
                //if (n_ensayos >= 1) {
                n_ensayos--;
                System.out.println("");
                System.out.println("");
                System.out.println("Ensayo no." + n_ensayos);

                //} else { //fin de la prueba
                //if (click_buenos ==  umbral){
                //  System.exit(0);
                //}else{
                //  System.out.println("");
                //System.out.println("");
                //System.out.println("Extra Ensayo no." + n_ensayos); 
                //}
                //}
                //momento en que aparece el nuevo estimulo
                Calendar calendario = new GregorianCalendar();

                //Coordenadas del estímulo
                x = this.lblEstimulo.getLocation().x;
                y = this.lblEstimulo.getLocation().y;

                System.out.println("Estímulo X = " + x + " ; Y = " + y);

                //Coordenadas del click
                System.out.println("Click X = " + evt.getX() + " ; Y = " + evt.getY());

                //distancia del clic con referencia del punto
                System.out.println("Diferencia X = " + String.valueOf(x - evt.getX()));
                System.out.println("Diferencia Y = " + String.valueOf(y - evt.getY()));

                //momento del click
                hora = calendario.get(Calendar.HOUR_OF_DAY);
                minutos = calendario.get(Calendar.MINUTE);
                segundos = calendario.get(Calendar.SECOND);
                milisegundos = calendario.get(Calendar.MILLISECOND);

                date_b = new java.util.Date();  //<-----

                long diff = date_b.getTime() - date_a.getTime();

                long diffSeconds = diff / 1000;
                long diffMinutes = diff / (60 * 1000);
                long diffHours = diff / (60 * 60 * 1000);

                System.out.println("Momento del click: " + hora + ":" + minutos + ":" + segundos + ":" + milisegundos);

                System.out.println("Diferencia msec: " + diffHours + ":" + diffMinutes + ":" + diffSeconds + ":" + Integer.toString(Math.abs(milisegundos - milisegundos_a)));

                //Definiendo el umbral para definir que una persona ya aprendió a usar el mouse
                int diff_x = x - evt.getX();
                int diff_y = y - evt.getY();

                String posicion = "";
                if (n_ensayos % 2 == 0) {//al centro
                    posicion = "aleatoria";
                } else {
                    posicion = "centro";
                }

                output.newLine();

                if (diffSeconds < lim_tiempo && Math.abs(diff_x) <= lim_x && Math.abs(diff_y) <= lim_y) {

                    click_buenos++;

                    System.out.println("Clicks correctos : " + click_buenos);

                    // Guardando en el arreglo los resultados
                    //Estímulo                         Click            Diferencias
                    output.write(x + "," + y + "," + hora_a + ":" + minutos_a + ":" + segundos_a + ":" + milisegundos_a + ","
                            + Integer.toString(evt.getX()) + "," + Integer.toString(evt.getY()) + "," + hora + ":" + minutos + ":" + segundos + ":" + milisegundos + ","
                            + Integer.toString(x - evt.getX()) + "," + Integer.toString(y - evt.getY()) + "," + diffHours + ":" + diffMinutes + ":" + diffSeconds + ":" + Integer.toString(Math.abs(milisegundos - milisegundos_a)) + ",correcto," + posicion);

                    output.flush();

                } else {

                    click_buenos = 0;

                    output.write(x + "," + y + "," + hora_a + ":" + minutos_a + ":" + segundos_a + ":" + milisegundos_a + ","
                            + Integer.toString(evt.getX()) + "," + Integer.toString(evt.getY()) + "," + hora + ":" + minutos + ":" + segundos + ":" + milisegundos + ","
                            + Integer.toString(x - evt.getX()) + "," + Integer.toString(y - evt.getY()) + "," + diffHours + ":" + diffMinutes + ":" + diffSeconds + ":" + Integer.toString(Math.abs(milisegundos - milisegundos_a)) + ",_," + posicion);

                    output.flush();
                }

                if (click_buenos == umbral) {

                    System.exit(0);

                }

                if (n_ensayos % 2 == 0) {//al centro

                    if (pantalla_completa) {

                        x = (screenSize.width / 2);
                        y = (screenSize.height / 2);

                    } else {

                        x = 100;
                        y = 100;
                    }

                } else {//posición aleatoria del estímulo

                    Random r = new Random();

                    if (pantalla_completa) {

                        x = r.nextInt(screenSize.width - 150) + 1; // Entre 0 y 5, más 1
                        y = r.nextInt(screenSize.height - 150) + 1; // Entre 0 y 5, más 1

                    } else {

                        x = r.nextInt(600) + 1; // Entre 0 y 5, más 1
                        y = r.nextInt(600) + 1; // Entre 0 y 5, más 1
                    }

                }

                TimeUnit.MILLISECONDS.sleep(0); //<-----retardo presentación estímulo!

                // moviendo su posición de manera aleatoria
                hora_a = calendario.get(Calendar.HOUR_OF_DAY);
                minutos_a = calendario.get(Calendar.MINUTE);
                segundos_a = calendario.get(Calendar.SECOND);
                milisegundos_a = calendario.get(Calendar.MILLISECOND);

                date_a = new java.util.Date();  //<-----

                this.lblEstimulo.setLocation(x, y);

            } else {

                JOptionPane.showMessageDialog(null, "No ha iniciado la prueba, sus registros no se guardarán en un archivo *.CSV", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (InterruptedException | IOException ex) {
            Logger.getLogger(AreaEntrenamiento.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_formMousePressed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        try {

            n_ensayos = parseInt(JOptionPane.showInputDialog("Introduce el nuevo número de ensayos (default es n_ensayos = 10)", JOptionPane.QUESTION_MESSAGE));

            JOptionPane.showMessageDialog(null, "El número ingresado es: " + n_ensayos);

            JOptionPane.showMessageDialog(null, "Ahora debe iniciar prueba o presionar Ctrl + A, para guardar sus registros adecuadamente.");

        } catch (NumberFormatException excepcion) {

            JOptionPane.showMessageDialog(null, "¡Debe introducir un número válido, p. ej. 10,7 o 30, etc.", "Error", JOptionPane.ERROR_MESSAGE);

        }


    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:

        try {

            umbral = parseInt(JOptionPane.showInputDialog("Introduce el nuevo umbral de clicks correctos (default es umbral = 5)", JOptionPane.QUESTION_MESSAGE));

            JOptionPane.showMessageDialog(null, "El número ingresado es: " + umbral);

            JOptionPane.showMessageDialog(null, "Ahora debe iniciar prueba o presionar Ctrl + A, para guardar sus registros adecuadamente.");

        } catch (NumberFormatException excepcion) {

            JOptionPane.showMessageDialog(null, "¡Debe introducir un número válido, p. ej. 10,7 o 30, etc.", "Error", JOptionPane.ERROR_MESSAGE);

        }

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        try {

            lim_tiempo = parseInt(JOptionPane.showInputDialog("Introduce el nuevo límite de tiempo, en segundos (default es limite_tiempo = 3)", JOptionPane.QUESTION_MESSAGE));

            JOptionPane.showMessageDialog(null, "El número ingresado es: " + lim_tiempo);

            JOptionPane.showMessageDialog(null, "Ahora debe iniciar prueba o presionar Ctrl + A, para guardar sus registros adecuadamente.");

        } catch (NumberFormatException excepcion) {

            JOptionPane.showMessageDialog(null, "¡Debe introducir un número válido, p. ej. 10,7 o 30, etc.", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void lblEstimuloMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblEstimuloMousePressed
        // TODO add your handling code here:

        //formMousePressed(evt);
        try {
            // TODO add your handling code here:

            if (iniciar_prueba) {

                //Coordenadas en donde dio clic el sujeto
                //if (n_ensayos >= 1) {
                n_ensayos--;
                System.out.println("");
                System.out.println("");
                System.out.println("Ensayo no." + n_ensayos);

                //} else { //fin de la prueba
                //if (click_buenos ==  umbral){
                //System.exit(0);
                //}else{
                //  System.out.println("");
                //System.out.println("");
                //System.out.println("Extra Ensayo no." + n_ensayos); 
                //}
                //}
                //momento en que aparece el nuevo estimulo
                Calendar calendario = new GregorianCalendar();

                //Coordenadas del estímulo
                x = this.lblEstimulo.getLocation().x;
                y = this.lblEstimulo.getLocation().y;

                System.out.println("Estímulo X = " + x + " ; Y = " + y);

                //Coordenadas del click
                System.out.println("Click X = " + evt.getX() + " ; Y = " + evt.getY());

                //distancia del clic con referencia del punto
                System.out.println("Diferencia X = " + String.valueOf(x - evt.getX()));
                System.out.println("Diferencia Y = " + String.valueOf(y - evt.getY()));

                //momento del click
                hora = calendario.get(Calendar.HOUR_OF_DAY);
                minutos = calendario.get(Calendar.MINUTE);
                segundos = calendario.get(Calendar.SECOND);
                milisegundos = calendario.get(Calendar.MILLISECOND);

                date_b = new java.util.Date();  //<-----

                long diff = date_b.getTime() - date_a.getTime();

                long diffSeconds = diff / 1000;
                long diffMinutes = diff / (60 * 1000);
                long diffHours = diff / (60 * 60 * 1000);

                System.out.println("Momento del click: " + hora + ":" + minutos + ":" + segundos + ":" + milisegundos);

                System.out.println("Diferencia msec: " + diffHours + ":" + diffMinutes + ":" + diffSeconds + ":" + Integer.toString(Math.abs(milisegundos - milisegundos_a)));

                //Definiendo el umbral para definir que una persona ya aprendió a usar el mouse
                int diff_x = x - Math.abs(x + evt.getX());
                int diff_y = y - Math.abs(y + evt.getY());

                String posicion = "";
                if (n_ensayos % 2 == 0) {//al centro
                    posicion = "aleatoria";
                } else {
                    posicion = "centro";
                }

                output.newLine();

                if (diffSeconds < lim_tiempo && Math.abs(diff_x) <= lim_x && Math.abs(diff_y) <= lim_y) {

                    click_buenos++;

                    System.out.println("Clicks correctos : " + click_buenos);

                    // Guardando en el arreglo los resultados
                    //Estímulo                         Click            Diferencias
                    output.write(x + "," + y + "," + hora_a + ":" + minutos_a + ":" + segundos_a + ":" + milisegundos_a + ","
                            + Integer.toString(x + evt.getX()) + "," + Integer.toString(y + evt.getY()) + "," + hora + ":" + minutos + ":" + segundos + ":" + milisegundos + ","
                            + Integer.toString(x - Math.abs(x + evt.getX())) + "," + Integer.toString(y - Math.abs(y + evt.getY())) + "," + diffHours + ":" + diffMinutes + ":" + diffSeconds + ":" + Integer.toString(Math.abs(milisegundos - milisegundos_a)) + ",correcto, " + posicion);

                    output.flush();

                } else {

                    click_buenos = 0; // se reinicia la cuenta, hasta que haga 5 clicks buenos, es decir, atinarle al "target"

                    output.write(x + "," + y + "," + hora_a + ":" + minutos_a + ":" + segundos_a + ":" + milisegundos_a + ","
                            + Integer.toString(x + evt.getX()) + "," + Integer.toString(y + evt.getY()) + "," + hora + ":" + minutos + ":" + segundos + ":" + milisegundos + ","
                            + Integer.toString(x - Math.abs(x + evt.getX())) + "," + Integer.toString(y - Math.abs(y + evt.getY())) + "," + diffHours + ":" + diffMinutes + ":" + diffSeconds + ":" + Integer.toString(Math.abs(milisegundos - milisegundos_a)) + ",_," + posicion);

                    output.flush();
                }

                if (click_buenos == umbral) {

                    System.exit(0);

                }

                if (n_ensayos % 2 == 0) {//al centro

                    if (pantalla_completa) {

                        x = (screenSize.width / 2);
                        y = (screenSize.height / 2);

                    } else {

                        x = 100;
                        y = 100;
                    }

                } else {//posición aleatoria del estímulo

                    Random r = new Random();

                    if (pantalla_completa) {

                        x = r.nextInt(screenSize.width - 150) + 1; // Entre 0 y 5, más 1
                        y = r.nextInt(screenSize.height - 150) + 1; // Entre 0 y 5, más 1

                    } else {

                        x = r.nextInt(600) + 1; // Entre 0 y 5, más 1
                        y = r.nextInt(600) + 1; // Entre 0 y 5, más 1
                    }

                }

                TimeUnit.MILLISECONDS.sleep(0); //<-----retardo presentación estímulo!

                hora_a = calendario.get(Calendar.HOUR_OF_DAY);
                minutos_a = calendario.get(Calendar.MINUTE);
                segundos_a = calendario.get(Calendar.SECOND);
                milisegundos_a = calendario.get(Calendar.MILLISECOND);

                date_a = new java.util.Date();  //<-----

                this.lblEstimulo.setLocation(x, y);

            } else {

                JOptionPane.showMessageDialog(null, "No ha iniciado la prueba, sus registros no se guardarán en un archivo *.CSV", "Error", JOptionPane.ERROR_MESSAGE);
            }

        } catch (InterruptedException | IOException ex) {
            Logger.getLogger(AreaEntrenamiento.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_lblEstimuloMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AreaEntrenamiento.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AreaEntrenamiento().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(AreaEntrenamiento.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JLabel lblEstimulo;
    private javax.swing.JMenuItem menu_cerrar;
    private javax.swing.JMenuItem menu_iniciar_entrenamiento;
    private javax.swing.JMenu menu_num_ensayos;
    // End of variables declaration//GEN-END:variables
}
